{import @value.latte}

{define level}
	{if isset($schema[reference])}
		{* toto: check for recursion *}
		{include level schema => $loadReference($schema[reference])}
	{elseif
		(isset($schema[anyOf]) && $operator = anyOf) ||
		(isset($schema[allOf]) && $operator = allOf) ||
		(isset($schema[oneOf]) && $operator = oneOf)
	}
		<span class="d-operator-keywords">{$operator}</span>
		{foreach $schema[$operator] as $subSchema}
			<span class="d-operator-inner">&ndash; {include level schema => $subSchema}</span>
		{/foreach}
	{elseif isset($schema[enum])}
		<span class="d-enum"><span class="d-enum-keyword">{if count($schema[enum]) === 1}const{else}enum{/if}</span>[{foreach $schema[enum] as $enumValue}{*
			*}{include value value => $enumValue}{sep}, {/sep}{*
		*}{/foreach}]</span>
	{else}
		{if isset($schema[sample]) || array_key_exists(sample, $schema)}
			<span class="d-sample">{include value value => $schema[sample]}</span>
		{/if}
		<span class="d-types">
		{var $types = explode('|', $schema[type])}
		{foreach $types as $type}{*
			*}{if $type === 'int'}{*
				*}<span class="d-type d-type-int">int</span>{*
				*}{if isset($schema[minValue]) || isset($schema[maxValue])}
					<span class="d-number-count">{$schema[minValue]??'-∞'}&hellip;{$schema[maxValue]??'∞'}</span>{*
				*}{/if}{*
			*}{elseif $type === 'float'}{*
				*}<span class="d-type d-type-float">float</span>{*
				*}{if isset($schema[minValue]) || isset($schema[maxValue])}
					<span class="d-number-count">{$schema[minValue]??'-∞'}&hellip;{$schema[maxValue]??'∞'}</span>{*
				*}{/if}{*
			*}{elseif $type === 'string'}{*
				*}<span class="d-type d-type-string">string</span>{*
				*}{if isset($schema[regexp])}(<span class="d-regexp" attr="Regular Expression">{$schema[regexp]}</span>){/if}{*
				*}{if isset($schema[minLength]) || isset($schema[maxLength])}
					<span class="d-number-count">{$schema[minLength]??'0'}&hellip;{$schema[maxLength]??'∞'} chars</span>{*
				*}{/if}{*
			*}{elseif $type === 'bool'}{*
				*}<span class="d-type d-type-bool">bool</span>{*
			*}{elseif $type === 'null'}{*
				*}<span class="d-type d-type-null">null</span>{*
			*}{elseif $type === 'any'}{*
				*}<span class="d-type-any">any</span>{*
			*}{elseif $type === 'array'}{*
				*}<span class="d-type-array">{*
					*}[
					<span class="d-type-arary-inner">
					<span class="d-type-map-inner" n:tag-if="($schema[item][type] ?? 'map') === map">{* item may contain a reference *}
					{include level schema => $schema[item]}
					<span class="d-array-count">{$schema[minCount]??'0'}&hellip;{$schema[maxCount]??'∞'}</span>
					</span>
					</span>
					]{*
				*}</span>{*
			*}{elseif $type === 'map'}{*
				*}<span class="d-type-map">{*
					*}{
					<span class="d-type-map-inner">
					{ifset $schema[properties]}
					{foreach $schema[properties] as $keyName => $key}
						<span class="d-row">
							<span class="d-name">{$keyName}</span>:
							{include level schema => $key}
						</span>
					{/foreach}
					{/ifset}
					{ifset $schema[regexpProperties]}
					{foreach $schema[regexpProperties] as $keyName => $key}
						<span class="d-row">
							<span class="d-name d-regexp" title="Any property matching this regular expression">{$keyName}</span>:
							{include level schema => $key}
						</span>
					{/foreach}
					{/ifset}
					</span>
					}{*
				*}</span>{*
			*}{/if}{sep}<span class="d-type-sep">|</span>{/sep}{*
		*}{/foreach}
		</span>
		{ifset $schema[description]}
			<span class="d-description">{$schema[description]|texy}</span>
		{/ifset}
	{/if}
{/define}

<div n:class="isset($inline) && $inline ? d-inline : d-block">
	<button class="btn-sample-toggler btn btn-default btn-sm">types/samples</button>
	{include level schema => $schema}
</div>
